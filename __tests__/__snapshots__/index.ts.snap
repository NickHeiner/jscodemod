// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`happy path arrow-function-inline-return 1`] = `
"import * as BabelTypes from '@babel/types';
import {Visitor} from '@babel/traverse';

// TODO is our intentional any type.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type TODO = any;

export default ({types: t}: {types: typeof BabelTypes}): {visitor: Visitor<TODO>} => 
  ({
    visitor: {
      ArrowFunctionExpression(path) {
        if (t.isBlockStatement(path.node.body) && path.node.body.body.length === 1 &&
              t.isReturnStatement(path.node.body.body[0])) {

          // I'm confident that this value will not be null, based on the runtime checks above.
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          path.get('body').replaceWith(path.node.body.body[0].argument!);  
        }
      }
    }
  });"
`;

exports[`happy path arrow-function-inline-return 2`] = `
"import {Codemod} from 'jscodemod';
import babelPlugin from './babel-plugin';
import {transformSync} from '@babel/core';

const codemod: Codemod = {
  transform({source, filePath}) {
    return transformSync(source, {
      filename: filePath,
      plugins: ['@babel/plugin-syntax-optional-chaining', babelPlugin],
      ast: true
    })?.code;
  }
};

export default codemod;"
`;

exports[`happy path arrow-function-inline-return 3`] = `"const g = a => a?.b?.c?.d;"`;

exports[`happy path arrow-function-inline-return 4`] = `"const f = () => 1;"`;

exports[`happy path prepend-string 1`] = `
"module.exports = {
  transform({source}) {
    return \`/* prefix */\\\\n\${source}\`;
  }
};"
`;

exports[`happy path prepend-string 2`] = `"module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;"`;

exports[`happy path prepend-string 3`] = `
"/* prefix */
console.log('a');"
`;

exports[`happy path prepend-string 4`] = `
"/* prefix */
function b() {}"
`;
