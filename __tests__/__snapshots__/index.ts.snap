// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TS compilation flags Path to TSC is specified 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nth/jscodemod';

// Compiling this will not work automatically, because no TSC will be found.

const codemod: Codemod = {
  transform({source}) {
    return \`/* prefix no-tsc */\\\\n\${source}\`;
  }
};

export default codemod;",
  "input.js": "/* prefix no-tsc */
module.exports = {
  input: 'file'
};",
}
`;

exports[`TS compilation flags Specified tsconfig path 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nth/jscodemod';

// Compiling this will not work, because no TSC will be found.

const codemod: Codemod = {
  transform({source}) {
    return \`/* prefix tsconfig-non-standard-location */\\\\n\${source}\`;
  }
};

export default codemod;",
  "configs/tsconfig.json": "{
  \\"include\\": [\\"../codemod/*.ts\\"],

  \\"compilerOptions\\": {
    \\"target\\": \\"ES2019\\",
    \\"module\\": \\"commonjs\\",
    \\"strict\\": true,

    \\"rootDir\\": \\"..\\",

    \\"outDir\\": \\"should-be-ignored\\",
    
    \\"noUnusedLocals\\": true,
    \\"noUnusedParameters\\": true,
    \\"noImplicitReturns\\": true, 
    \\"noFallthroughCasesInSwitch\\": true,

    \\"moduleResolution\\": \\"node\\",
    \\"esModuleInterop\\": true,

    \\"skipLibCheck\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  }
}
",
  "input.js": "/* prefix tsconfig-non-standard-location */
const file = 'asdf';",
}
`;

exports[`error handling handles codemod throwing an error 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  transform({filePath}) {
    throw new Error(\`Error for: \${filePath}\`);
  }
};",
  "source/a.js": "console.log('a');",
  "source/b.js": "console.log('b');",
}
`;

exports[`error handling handles codemod throwing an error 2`] = `
"{\\"name\\":\\"jscodemod-worker\\",\\"hostname\\":\\"nfml-nheinerTMM\\",\\"pid\\":77355,\\"sourceCodeFile\\":\\"/private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/a.js\\",\\"level\\":50,\\"error\\":{\\"message\\":\\"Error for: /private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/a.js\\",\\"stack\\":\\"Error: Error for: /private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/a.js\\\\n    at Object.transform (/private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/codemod/codemod.js:3:11)\\\\n    at main (/Users/nheiner/code/jscodemod/build/worker.js:30:41)\\\\n    at async /Users/nheiner/code/jscodemod/node_modules/piscina/dist/src/worker.js:141:26\\"},\\"msg\\":\\"Codemod threw an error for a file.\\",\\"time\\":\\"2021-05-25T13:22:40.862Z\\",\\"v\\":0}
{\\"name\\":\\"jscodemod-worker\\",\\"hostname\\":\\"nfml-nheinerTMM\\",\\"pid\\":77355,\\"sourceCodeFile\\":\\"/private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/b.js\\",\\"level\\":50,\\"error\\":{\\"message\\":\\"Error for: /private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/b.js\\",\\"stack\\":\\"Error: Error for: /private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/source/b.js\\\\n    at Object.transform (/private/var/folders/5q/vbysv3n16x57dtk8gh2bnr0w0000gn/T/@nth-jscodemod-test-handles-codemod-throwing-an-error9260a20d613256b252114e7a5fc9d2ba/codemod/codemod.js:3:11)\\\\n    at main (/Users/nheiner/code/jscodemod/build/worker.js:30:41)\\\\n    at async /Users/nheiner/code/jscodemod/node_modules/piscina/dist/src/worker.js:141:26\\"},\\"msg\\":\\"Codemod threw an error for a file.\\",\\"time\\":\\"2021-05-25T13:22:40.868Z\\",\\"v\\":0}"
`;

exports[`error handling missing required argument to codemod 1`] = `
"Options:
      --version       Show version number                              [boolean]
  -r, --requiredFlag  This arg is required                   [string] [required]
      --help          Show help                                        [boolean]

Missing required argument: requiredFlag
The codemod's parseArgs method called process.exit(). This probably means the arguments you passed to it didn't validate. To pass arguments to a codemod, put them at the end of the whole command, like 'jscodemod -c codemod.js fileGlob -- -a b'."
`;

exports[`getTransformedContentsOfSingleFile returns the contents of a single file 1`] = `
"/* prefix prepend string */
function b() {}"
`;

exports[`git Modify dirty files 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  transform({source}) {
    return \`/* prefix git dirty */\\\\n\${source}\`;
  }
};",
  "git-ignored.js": "console.log('git ignored');
",
  "git-untracked.js": "// git untracked",
  "source/dirty.js": "/* prefix git dirty */
const x = 'dirty state';",
  "source/nested-git-ignored.js": "console.log('nested git ignored');",
  "source/unmodified.js": "/* prefix git dirty */
const x = 'starting state';",
}
`;

exports[`git Reset dirty files 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  transform({source}) {
    return \`/* prefix git dirty */\\\\n\${source}\`;
  }
};",
  "git-ignored.js": "console.log('git ignored');
",
  "git-untracked.js": "// git untracked",
  "source/dirty.js": "/* prefix git dirty */
const x = 'starting state';",
  "source/nested-git-ignored.js": "console.log('nested git ignored');",
  "source/unmodified.js": "/* prefix git dirty */
const x = 'starting state';",
}
`;

exports[`happy path TS without manually specifying any of the args determining how to compile 1`] = `
Object {
  "codemod/babel-plugin.ts": "import * as BabelTypes from '@babel/types';
import type {Visitor} from '@babel/traverse';

// TODO is our intentional any type.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type TODO = any;

export default ({types: t}: {types: typeof BabelTypes}): {visitor: Visitor<TODO>} => 
  ({
    visitor: {
      ArrowFunctionExpression(path) {
        if (t.isBlockStatement(path.node.body) && path.node.body.body.length === 1 &&
              t.isReturnStatement(path.node.body.body[0])) {

          // I'm confident that this value will not be null, based on the runtime checks above.
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          path.get('body').replaceWith(path.node.body.body[0].argument!);  
        }
      }
    }
  });",
  "codemod/index.ts": "import {Codemod} from '@nth/jscodemod';
import babelPlugin, {TODO} from './babel-plugin';
import {parse as babelParse, TransformOptions, transformSync} from '@babel/core';
import {parse, print} from 'recast';
import _ from 'lodash';
import type {Visitor} from '@babel/traverse';

const codemod: Codemod = {
  transform({source, filePath}: {source: string, filePath: string}) {
    const getBabelOpts = (plugins: Exclude<TransformOptions['plugins'], null> = []): TransformOptions => ({
      filename: filePath,
      plugins: [...plugins, '@babel/plugin-syntax-optional-chaining', '@babel/plugin-syntax-typescript', babelPlugin],
      ast: true
    });
    
    const parser = {
      parse(source: string, opts: Record<string, unknown>) {
        return babelParse(source, {
          ...getBabelOpts(),
          ..._.omit(
            opts, 
            'jsx', 'loc', 'locations', 'range', 'comment', 'onComment', 'tolerant', 'ecmaVersion'
          )
        });
      }
    };
    
    const ast = parse(source, {parser});

    const setAst = (): {visitor: Visitor<TODO>} => ({
      visitor: {
        Program(path) {
          path.replaceWith(ast.program);
        }
      }
    });

    const result = transformSync('', getBabelOpts([setAst]));
    if (!result) {
      throw new Error(\`Transforming \\"\${filePath}\\" resulted in a null babel result.\`);
    }

    // @ts-ignore
    return print(result.ast).code;
  }
};

export default codemod;",
  "source/optional-chaining.js": "const g = a => a?.b?.c?.d;",
  "source/ts.ts": "function g(
  a: string,
  b: number,
  c: boolean
) {
  return 0;
}

const f = () => 1;",
}
`;

exports[`happy path dry 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  ignore: /codemod-ignored/,
  postProcess: modifiedFiles => {
    console.log('codemod post process', JSON.stringify(modifiedFiles));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs}) {
    console.log('commandLineArgs', JSON.stringify(commandLineArgs));
    return \`/* prefix prepend string */\\\\n\${source}\`;
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "source/a.js": "console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
}
`;

exports[`happy path dry porcelain 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  ignore: /codemod-ignored/,
  postProcess: modifiedFiles => {
    console.log('codemod post process', JSON.stringify(modifiedFiles));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs}) {
    console.log('commandLineArgs', JSON.stringify(commandLineArgs));
    return \`/* prefix prepend string */\\\\n\${source}\`;
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "source/a.js": "console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
}
`;

exports[`happy path dry porcelain 2`] = `
"<test-dir>/source/.dotfile.js
<test-dir>/source/a.js
<test-dir>/source/b.js
<test-dir>/source/blank.js"
`;

exports[`happy path prepend-string 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  ignore: /codemod-ignored/,
  postProcess: modifiedFiles => {
    console.log('codemod post process', JSON.stringify(modifiedFiles));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs}) {
    console.log('commandLineArgs', JSON.stringify(commandLineArgs));
    return \`/* prefix prepend string */\\\\n\${source}\`;
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "source/a.js": "/* prefix prepend string */
console.log('a');",
  "source/b.js": "/* prefix prepend string */
function b() {}",
  "source/blank.js": "/* prefix prepend string */
",
  "source/codemod-ignored.js": "// codemod ignored",
}
`;

exports[`happy path prepend-string 2`] = `"codemod post process [\\"<test-dir>/source/.dotfile.js\\",\\"<test-dir>/source/a.js\\",\\"<test-dir>/source/b.js\\",\\"<test-dir>/source/blank.js\\"]"`;

exports[`happy path prepend-string 3`] = `"commandLineArgs {}"`;
