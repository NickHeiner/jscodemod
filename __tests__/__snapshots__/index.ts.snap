// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TS compilation flags Path to TSC is specified 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nick.heiner/jscodemod';

// Compiling this will not work automatically, because no TSC will be found.

const codemod: Codemod = {
  transform({source}) {
    return \`/* prefix no-tsc */\\\\n\${source}\`;
  }
};

export default codemod;",
  "input.js": "/* prefix no-tsc */
module.exports = {
  input: 'file'
};",
}
`;

exports[`TS compilation flags Specified tsconfig path 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nick.heiner/jscodemod';

// Compiling this will not work, because no TSC will be found.

const codemod: Codemod = {
  transform({source}) {
    return \`/* prefix tsconfig-non-standard-location */\\\\n\${source}\`;
  }
};

export default codemod;",
  "configs/tsconfig.json": "{
  \\"include\\": [\\"../codemod/*.ts\\"],

  \\"compilerOptions\\": {
    \\"target\\": \\"ES2019\\",
    \\"module\\": \\"commonjs\\",
    \\"strict\\": true,

    \\"rootDir\\": \\"..\\",

    \\"outDir\\": \\"should-be-ignored\\",
    
    \\"noUnusedLocals\\": true,
    \\"noUnusedParameters\\": true,
    \\"noImplicitReturns\\": true, 
    \\"noFallthroughCasesInSwitch\\": true,

    \\"moduleResolution\\": \\"node\\",
    \\"esModuleInterop\\": true,

    \\"skipLibCheck\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  }
}
",
  "input.js": "/* prefix tsconfig-non-standard-location */
const file = 'asdf';",
}
`;

exports[`error handling handles codemod codemod-unnamed.js (codemod-unnamed.js) throwing an error 1`] = `
Object {
  "codemod/codemod-named.js": "module.exports = {
  name: 'my-codemod-name',
  transform({filePath}) {
    throw new Error(\`Error for: \${filePath}\`);
  }
};",
  "codemod/codemod-unnamed.js": "module.exports = {
  transform({filePath}) {
    throw new Error(\`Error for: \${filePath}\`);
  }
};",
  "source/a.js": "console.log('a');",
  "source/b.js": "console.log('b');",
}
`;

exports[`error handling handles codemod my-codemod-name (codemod-named.js) throwing an error 1`] = `
Object {
  "codemod/codemod-named.js": "module.exports = {
  name: 'my-codemod-name',
  transform({filePath}) {
    throw new Error(\`Error for: \${filePath}\`);
  }
};",
  "codemod/codemod-unnamed.js": "module.exports = {
  transform({filePath}) {
    throw new Error(\`Error for: \${filePath}\`);
  }
};",
  "source/a.js": "console.log('a');",
  "source/b.js": "console.log('b');",
}
`;

exports[`error handling missing required argument to codemod 1`] = `
"Options:
      --version       Show version number                              [boolean]
  -r, --requiredFlag  This arg is required                   [string] [required]
      --help          Show help                                        [boolean]

Missing required argument: requiredFlag
The codemod's parseArgs method called process.exit(). This probably means the arguments you passed to it didn't validate. To pass arguments to a codemod, put them at the end of the whole command, like 'jscodemod -c codemod.js fileGlob -- -a b'."
`;

exports[`error handling passing both --inputFileList and glob pattern 1`] = `
"bin.js [inputFilesPatterns...]

Run the codemod. Any arguments after \\"--\\" will be passed through to the codemod.

Positionals:
  inputFilesPatterns                                                    [string]

Primary
  -c, --codemod               Path to the codemod to run     [string] [required]
  -d, --dry                   Print a list of files to modify, then stop.
                                                                       [boolean]
  -r, --resetDirtyInputFiles  Use git to restore dirty files to a clean state
                              before running the codemod. This assumes that all
                              input files have the same .git root. If you use
                              submodules, this may not work.
                                                      [boolean] [default: false]
  -l, --inputFileList         A file containing a newline-delimited set of file
                              paths to run on                           [string]

TypeScript
      --tsconfig  (Only applicable if your codemod is written in TypeScript)
                  path to the tsconfig.json                             [string]
      --tsOutDir  (Only applicable if your codemod is written in TypeScript)
                  directory in which to compile your codemod to. Defaults to a
                  temporary directory.                                  [string]
      --tsc       (Only applicable if your codemod is written in TypeScript)
                  path to a \\"tsc\\" executable to compile your codemod. Defaults
                  to looking for a \\"tsc\\" bin accessible from the current working
                  directory.                                            [string]

Rarely Useful
      --jsonOutput  Output logs as JSON, instead of human-readable formatting.
                    Useful if you want to consume the output  of this tool from
                    another tool, or process the logs using your own Bunyan log
                    processor/formatter.              [boolean] [default: false]
  -p, --porcelain   Produce machine-readable output.  [boolean] [default: false]

Options:
      --version                     Show version number                [boolean]
  -b, --piscinaLowerBoundInclusive  Only use piscina if there are at least this
                                    many files. At smaller file sizes, the fixed
                                    cost of spinning up piscina outweighs the
                                    benefits.             [number] [default: 20]
      --help                        Show help                          [boolean]

You can't pass both an --inputFileList and a globby pattern."
`;

exports[`getTransformedContentsOfSingleFile processes codemod ignored files 1`] = `
"/* prefix prepend string */
// codemod ignored"
`;

exports[`getTransformedContentsOfSingleFile processes ignorefile ignored files 1`] = `"transformed"`;

exports[`getTransformedContentsOfSingleFile returns the contents of a single file 1`] = `
"/* prefix prepend string */
function b() {}"
`;

exports[`getTransformedContentsOfSingleFile throws an error if the codemod throws an error 1`] = `[Error: Error for: /Users/nheiner/code/jscodemod/fixtures/will-throw-error/source/a.js]`;

exports[`git Modify dirty files 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  ignore: 'dirty-transformed-by-second-codemod',
  transform({source}) {
    return \`/* prefix git dirty */\\\\n\${source}\`;
  },
  async postProcess(modifiedFiles, {jscodemod}) {
    console.log(JSON.stringify({modifiedFiles}));
    await jscodemod(
      require.resolve('./second-codemod'),
      {inputFilesPatterns: [require.resolve('../source/dirty-transformed-by-second-codemod')]}
    );
  }
};",
  "codemod/second-codemod.js": "module.exports = {
  transform({source}) {
    return \`/* prefix git dirty second codemod */\\\\n\${source}\`;
  }
};",
  "git-ignored.js": "console.log('git ignored');
",
  "git-untracked.js": "// git untracked",
  "source/dirty-transformed-by-second-codemod.js": "/* prefix git dirty second codemod */
// Transformed by second codemod
const y = 'dirty state';",
  "source/dirty.js": "/* prefix git dirty */
const x = 'dirty state';",
  "source/nested-git-ignored.js": "console.log('nested git ignored');",
  "source/unmodified.js": "/* prefix git dirty */
const x = 'starting state';",
}
`;

exports[`git Reset dirty files 1`] = `
Object {
  "codemod/codemod.js": "module.exports = {
  ignore: 'dirty-transformed-by-second-codemod',
  transform({source}) {
    return \`/* prefix git dirty */\\\\n\${source}\`;
  },
  async postProcess(modifiedFiles, {jscodemod}) {
    console.log(JSON.stringify({modifiedFiles}));
    await jscodemod(
      require.resolve('./second-codemod'),
      {inputFilesPatterns: [require.resolve('../source/dirty-transformed-by-second-codemod')]}
    );
  }
};",
  "codemod/second-codemod.js": "module.exports = {
  transform({source}) {
    return \`/* prefix git dirty second codemod */\\\\n\${source}\`;
  }
};",
  "git-ignored.js": "console.log('git ignored');
",
  "git-untracked.js": "// git untracked",
  "source/dirty-transformed-by-second-codemod.js": "/* prefix git dirty second codemod */
// Transformed by second codemod
const y = 'starting state';",
  "source/dirty.js": "/* prefix git dirty */
const x = 'starting state';",
  "source/nested-git-ignored.js": "console.log('nested git ignored');",
  "source/unmodified.js": "/* prefix git dirty */
const x = 'starting state';",
}
`;

exports[`happy path --inputFileList 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "/* prefix prepend string */
console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path All logging enabled 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "/* prefix prepend string */
console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path All logging enabled 2`] = `
Array [
  Object {
    "argv": Object {
      "$0": "<git-root>/build/bin.js",
      "_": Array [],
      "b": 20,
      "c": "codemod/codemod.js",
      "codemod": "codemod/codemod.js",
      "input-file-list": "input-file-list.txt",
      "inputFileList": "input-file-list.txt",
      "json-output": true,
      "jsonOutput": true,
      "l": "input-file-list.txt",
      "p": false,
      "piscina-lower-bound-inclusive": 20,
      "piscinaLowerBoundInclusive": 20,
      "porcelain": false,
      "r": false,
      "reset-dirty-input-files": false,
      "resetDirtyInputFiles": false,
    },
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodKeys": Array [
      "ignore",
      "postProcess",
      "parseArgs",
      "transform",
    ],
    "codemodName": "codemod.js",
    "codemodPath": "<test-dir>/codemod/codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodIgnores": Array [
      "/codemod-ignored/",
      "input-file-list.txt",
      "omitted-via-string-pattern",
    ],
    "codemodName": "codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "inputFilesBeforeIgnores": Array [
      "source/a.js",
      "source/codemod-ignored.js",
    ],
    "level": 20,
    "msg": "Filtering input file patterns.",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodName": "codemod.js",
    "count": 1,
    "durationMs": 117,
    "filesToModify": Array [
      "<test-dir>/source/a.js",
    ],
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "Found files to modify.",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodName": "codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "parsedArgs": Object {},
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodName": "codemod.js",
    "durationMs": 117,
    "gitRoot": null,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "action": "Codemod ready to start",
    "codemod": "codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "timeSinceRunStart": 0,
    "timeSinceRunStartPretty": "<placeholder timeSinceRunStartPretty>",
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Starting read file",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Completed read file",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Starting parse args",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Completed parse args",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Starting transform file",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 10,
    "msg": "Completed transform file",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "action": "modified",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "sourceCodeFile": "<test-dir>/source/a.js",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
    "writeFiles": true,
  },
  Object {
    "durationMs": 117,
    "durationMsPretty": "<placeholder pretty ms duration>",
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "The first codemod worker to return has done so.",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "action": "modified",
    "codeModified": true,
    "durationMs": 117,
    "error": null,
    "fileContents": "<truncated file contents>",
    "filePath": "<test-dir>/source/a.js",
    "hostname": "<hostname placeholder>",
    "level": 20,
    "meta": "meta for <test-dir>/source/a.js",
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodName": "codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "modifiedFiles": Array [
      "<test-dir>/source/a.js",
    ],
    "msg": "Starting postProcess",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodName": "codemod.js",
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "modifiedFiles": Array [
      "<test-dir>/source/a.js",
    ],
    "msg": "Completed postProcess",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
  Object {
    "codemodMetaResults": Array [
      Object {
        "action": "modified",
        "codeModified": true,
        "error": null,
        "fileContents": "/* prefix prepend string */
console.log('a');",
        "filePath": "<test-dir>/source/a.js",
        "meta": "meta for <test-dir>/source/a.js",
      },
    ],
    "durationMs": 117,
    "hostname": "<hostname placeholder>",
    "level": 20,
    "msg": "",
    "name": "jscodemod-coordinator",
    "pid": 9001,
    "prettyDuration": "<duration placeholder>",
    "time": 2012-01-01T00:00:00.000Z,
    "v": 0,
  },
]
`;

exports[`happy path TS without manually specifying any of the args determining how to compile 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nick.heiner/jscodemod';
import _ from 'lodash';
import path from 'path';
import * as BabelTypes from '@babel/types';
import type {Visitor} from '@babel/traverse';

// TODO is our intentional any type.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type TODO = any;

const codemod: Codemod = {
  getPlugin: ({willNotifyOnAstChange, astDidChange, filePath}) => {
    if (process.env.CALL_WILL_NOTIFY_ON_AST_CHANGE) {
      willNotifyOnAstChange();
    }

    return ({types: t}: {types: typeof BabelTypes}): {visitor: Visitor<TODO>} => 
      ({
        visitor: {
          ArrowFunctionExpression(path) {
            if (t.isBlockStatement(path.node.body) && path.node.body.body.length === 1 &&
                  t.isReturnStatement(path.node.body.body[0])) {

              if (process.env.CALL_AST_DID_CHANGE) {
                astDidChange();
              }
    
              // I'm confident that this value will not be null, based on the runtime checks above.
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              path.get('body').replaceWith(path.node.body.body[0].argument!);  
            }
          },
          Literal(literalPath) {
            // This tests to make sure that getPlugin is called for each file, and is not reused between files.
            if (literalPath.node.type === 'StringLiteral') {
              literalPath.replaceWith(t.stringLiteral(path.basename(filePath)));
              literalPath.skip();
            }
          }
        }
      });
  },
  presets: ['@babel/preset-react', '@babel/preset-typescript', '@babel/preset-env']
};

export default codemod;",
  "source/change-string-literal-0.js": "const a = \\"change-string-literal-0.js\\";",
  "source/change-string-literal-1.js": "const a = \\"change-string-literal-1.js\\";",
  "source/commented-out.js": "// const g = a => {
//   return a?.b?.c?.d
// };",
  "source/optional-chaining.js": "const g = a => a?.b?.c?.d;


const C = <img />;
const Empty = <div></div>;
",
  "source/recast-oddities.js": "#!/usr/bin/env node

/* leading comment */
const y = 1;

let x = 1;/* trailing comment */

/**
 * I was previously seeing issues where this would transform \`return (\\\\n expr \\\\n)\` to \`return expr\`, but I'm not seeing
 * that any more.
 */
function f() {
  return (
    true || false
  )
}

// Will be erroneously transformed because of https://github.com/benjamn/recast/issues/914.
const e = () => (function(g, h) {
  return i;
});",
  "source/ts.ts": "function g(
  a: string,
  b: number,
  c: boolean
) {
  return 0;
}

const f = () => 1;",
}
`;

exports[`happy path dry 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path dry porcelain 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "console.log('a');",
  "source/b.js": "function b() {}",
  "source/blank.js": "",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path dry porcelain 2`] = `
"<test-dir>/source/.dotfile.js
<test-dir>/source/a.js
<test-dir>/source/b.js
<test-dir>/source/blank.js"
`;

exports[`happy path getPlugin calls astDidChange() but forgot to call willNotifyOnAstChange() 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nick.heiner/jscodemod';
import _ from 'lodash';
import path from 'path';
import * as BabelTypes from '@babel/types';
import type {Visitor} from '@babel/traverse';

// TODO is our intentional any type.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type TODO = any;

const codemod: Codemod = {
  getPlugin: ({willNotifyOnAstChange, astDidChange, filePath}) => {
    if (process.env.CALL_WILL_NOTIFY_ON_AST_CHANGE) {
      willNotifyOnAstChange();
    }

    return ({types: t}: {types: typeof BabelTypes}): {visitor: Visitor<TODO>} => 
      ({
        visitor: {
          ArrowFunctionExpression(path) {
            if (t.isBlockStatement(path.node.body) && path.node.body.body.length === 1 &&
                  t.isReturnStatement(path.node.body.body[0])) {

              if (process.env.CALL_AST_DID_CHANGE) {
                astDidChange();
              }
    
              // I'm confident that this value will not be null, based on the runtime checks above.
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              path.get('body').replaceWith(path.node.body.body[0].argument!);  
            }
          },
          Literal(literalPath) {
            // This tests to make sure that getPlugin is called for each file, and is not reused between files.
            if (literalPath.node.type === 'StringLiteral') {
              literalPath.replaceWith(t.stringLiteral(path.basename(filePath)));
              literalPath.skip();
            }
          }
        }
      });
  },
  presets: ['@babel/preset-react', '@babel/preset-typescript', '@babel/preset-env']
};

export default codemod;",
  "source/change-string-literal-0.js": "const a = 'replace with file name';",
  "source/change-string-literal-1.js": "const a = 'replace with file name';",
  "source/commented-out.js": "// const g = a => {
//   return a?.b?.c?.d
// };",
  "source/optional-chaining.js": "const g = a => {
  return a?.b?.c?.d
};


const C = <img />;
const Empty = <div></div>;
",
  "source/recast-oddities.js": "#!/usr/bin/env node

/* leading comment */
const y = 1;

let x = 1; /* trailing comment */

/**
 * I was previously seeing issues where this would transform \`return (\\\\n expr \\\\n)\` to \`return expr\`, but I'm not seeing
 * that any more.
 */
function f() {
  return (
    true || false
  )
}

// Will be erroneously transformed because of https://github.com/benjamn/recast/issues/914.
const e = () => function(g, h) {
  return i;
};",
  "source/ts.ts": "function g(
  a: string,
  b: number,
  c: boolean
) {
  return 0;
}

const f = () => {
  return 1
};",
}
`;

exports[`happy path getPlugin returns a meta 1`] = `
"{
  \\"<test-dir>/source/a.js\\": 3,
  \\"<test-dir>/source/b.js\\": 1,
  \\"<test-dir>/source/c.js\\": 7
}"
`;

exports[`happy path getPlugin uses the willNotifyOnAstChange API 1`] = `
Object {
  "codemod/index.ts": "import {Codemod} from '@nick.heiner/jscodemod';
import _ from 'lodash';
import path from 'path';
import * as BabelTypes from '@babel/types';
import type {Visitor} from '@babel/traverse';

// TODO is our intentional any type.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type TODO = any;

const codemod: Codemod = {
  getPlugin: ({willNotifyOnAstChange, astDidChange, filePath}) => {
    if (process.env.CALL_WILL_NOTIFY_ON_AST_CHANGE) {
      willNotifyOnAstChange();
    }

    return ({types: t}: {types: typeof BabelTypes}): {visitor: Visitor<TODO>} => 
      ({
        visitor: {
          ArrowFunctionExpression(path) {
            if (t.isBlockStatement(path.node.body) && path.node.body.body.length === 1 &&
                  t.isReturnStatement(path.node.body.body[0])) {

              if (process.env.CALL_AST_DID_CHANGE) {
                astDidChange();
              }
    
              // I'm confident that this value will not be null, based on the runtime checks above.
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              path.get('body').replaceWith(path.node.body.body[0].argument!);  
            }
          },
          Literal(literalPath) {
            // This tests to make sure that getPlugin is called for each file, and is not reused between files.
            if (literalPath.node.type === 'StringLiteral') {
              literalPath.replaceWith(t.stringLiteral(path.basename(filePath)));
              literalPath.skip();
            }
          }
        }
      });
  },
  presets: ['@babel/preset-react', '@babel/preset-typescript', '@babel/preset-env']
};

export default codemod;",
  "source/change-string-literal-0.js": "const a = 'replace with file name';",
  "source/change-string-literal-1.js": "const a = 'replace with file name';",
  "source/commented-out.js": "// const g = a => {
//   return a?.b?.c?.d
// };",
  "source/optional-chaining.js": "const g = a => {
  return a?.b?.c?.d
};


const C = <img />;
const Empty = <div></div>;
",
  "source/recast-oddities.js": "#!/usr/bin/env node

/* leading comment */
const y = 1;

let x = 1; /* trailing comment */

/**
 * I was previously seeing issues where this would transform \`return (\\\\n expr \\\\n)\` to \`return expr\`, but I'm not seeing
 * that any more.
 */
function f() {
  return (
    true || false
  )
}

// Will be erroneously transformed because of https://github.com/benjamn/recast/issues/914.
const e = () => function(g, h) {
  return i;
};",
  "source/ts.ts": "function g(
  a: string,
  b: number,
  c: boolean
) {
  return 0;
}

const f = () => {
  return 1
};",
}
`;

exports[`happy path prepend-string 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "/* prefix prepend string */
console.log('a');",
  "source/b.js": "/* prefix prepend string */
function b() {}",
  "source/blank.js": "/* prefix prepend string */
",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path prepend-string 2`] = `"codemod post process [\\"<test-dir>/source/.dotfile.js\\",\\"<test-dir>/source/a.js\\",\\"<test-dir>/source/b.js\\",\\"<test-dir>/source/blank.js\\"]"`;

exports[`happy path prepend-string 3`] = `"resultMeta as passed to post process [[\\"<test-dir>/source/.dotfile.js\\",\\"meta for <test-dir>/source/.dotfile.js\\"],[\\"<test-dir>/source/a.js\\",\\"meta for <test-dir>/source/a.js\\"],[\\"<test-dir>/source/b.js\\",\\"meta for <test-dir>/source/b.js\\"],[\\"<test-dir>/source/blank.js\\",\\"meta for <test-dir>/source/blank.js\\"]]"`;

exports[`happy path prepend-string 4`] = `"commandLineArgs {}"`;

exports[`happy path prepend-string with piscina 1`] = `
Object {
  "codemod/codemod.js": "const silenceableLog = (...args) => {
  if (process.env.SILENT === 'true') {
    return;
  }

  console.log(...args);
}

module.exports = {
  ignore: [
    /codemod-ignored/,
    'input-file-list.txt',
    'omitted-via-string-pattern'
  ],
  postProcess: (modifiedFiles, {resultMeta}) => {
    silenceableLog('codemod post process', JSON.stringify(modifiedFiles));
    silenceableLog('resultMeta as passed to post process', JSON.stringify([...resultMeta.entries()]));
  },
  parseArgs: rawCommandLineArgs => ({rawCommandLineArgs}),
  transform({source, commandLineArgs, filePath}) {
    silenceableLog('commandLineArgs', JSON.stringify(commandLineArgs));
    return {
      meta: \`meta for \${filePath}\`,
      code: \`/* prefix prepend string */\\\\n\${source}\`
    };
  }
};",
  "codemod/jscodeshift-codemod.js": "module.exports = ({source}) => \`/* prefix */\\\\n\${source}\`;",
  "input-file-list.txt": "source/a.js
source/codemod-ignored.js",
  "source/a.js": "/* prefix prepend string */
console.log('a');",
  "source/b.js": "/* prefix prepend string */
function b() {}",
  "source/blank.js": "/* prefix prepend string */
",
  "source/codemod-ignored.js": "// codemod ignored",
  "source/codemod-omitted-via-string-pattern.js": "// codemod ignored",
}
`;

exports[`happy path prepend-string with piscina 2`] = `"codemod post process [\\"<test-dir>/source/.dotfile.js\\",\\"<test-dir>/source/a.js\\",\\"<test-dir>/source/b.js\\",\\"<test-dir>/source/blank.js\\"]"`;

exports[`happy path prepend-string with piscina 3`] = `"resultMeta as passed to post process [[\\"<test-dir>/source/.dotfile.js\\",\\"meta for <test-dir>/source/.dotfile.js\\"],[\\"<test-dir>/source/a.js\\",\\"meta for <test-dir>/source/a.js\\"],[\\"<test-dir>/source/b.js\\",\\"meta for <test-dir>/source/b.js\\"],[\\"<test-dir>/source/blank.js\\",\\"meta for <test-dir>/source/blank.js\\"]]"`;

exports[`happy path prepend-string with piscina 4`] = `"commandLineArgs {}"`;

exports[`ignore files happy path 1`] = `
Object {
  "codemod-missing-ignore-file.js": "module.exports = {
  transform() { 
    return 'transformed';
  },
  ignoreFiles: ['does-not-exist.ignore']
};",
  "codemod.js": "const path = require('path');

module.exports = {
  transform() { 
    return 'transformed';
  },
  ignoreFiles: [path.resolve(__dirname, 'root.ignore'), path.resolve(__dirname, 'dir-1/nested.ignore')]
};",
  "dir-1/dir-2/ignored-by-nested.txt": "",
  "dir-1/dir-2/ignored-by-root.txt": "",
  "dir-1/dir-2/transformed.txt": "transformed",
  "dir-1/ignored-by-nested.txt": "",
  "dir-1/ignored-by-root.txt": "",
  "dir-1/nested.ignore": "../ignored-by-nested.txt
ignored-by-nested.txt
dir-2/ignored-by-nested.txt",
  "dir-1/transformed.txt": "transformed",
  "ignored-by-nested.txt": "",
  "ignored-by-root.txt": "",
  "root.ignore": "ignored-by-root.txt
dir-1/ignored-by-root.txt
dir-1/dir-2/ignored-by-root.txt",
  "transformed.txt": "transformed",
}
`;
